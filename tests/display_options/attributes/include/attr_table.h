/**
 * @file attr_table.h
 *
 * @brief This is generated by attribute_generator.py
 *
 * Copyright (c) 2021 Laird Connectivity
 *
 * SPDX-License-Identifier: Apache-2.0
 */
#ifndef __ATTRIBUTE_TABLE_H__
#define __ATTRIBUTE_TABLE_H__

/******************************************************************************/
/* Includes                                                                   */
/******************************************************************************/
#include <zephyr.h>
#include <zephyr/types.h>
#include <stddef.h>

#include "attr_defs.h"

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************/
/* Indices                                                                    */
/******************************************************************************/

/* pystart - attribute indices */
#define ATTR_INDEX_lock                               2
#define ATTR_INDEX_load_path                          30
/* pyend */

/* pystart - attribute ids */
#define ATTR_ID_sensor_name                           0
#define ATTR_ID_attribute_version                     1
#define ATTR_ID_lock                                  2
#define ATTR_ID_settings_passcode                     3
#define ATTR_ID_settings_passcode_status              4
#define ATTR_ID_lock_status                           5
#define ATTR_ID_test_a                                6
#define ATTR_ID_test_b                                7
#define ATTR_ID_test_c                                8
#define ATTR_ID_test_d                                9
#define ATTR_ID_test_e                                10
#define ATTR_ID_test_f                                11
#define ATTR_ID_test_g                                12
#define ATTR_ID_test_h                                13
#define ATTR_ID_test_i                                14
#define ATTR_ID_test_j                                15
#define ATTR_ID_test_k                                16
#define ATTR_ID_test_l                                17
#define ATTR_ID_test_m                                18
#define ATTR_ID_test_n                                19
#define ATTR_ID_test_o                                20
#define ATTR_ID_test_p                                21
#define ATTR_ID_test_q                                22
#define ATTR_ID_test_r                                23
#define ATTR_ID_test_s                                24
#define ATTR_ID_test_t                                25
#define ATTR_ID_test_u                                26
#define ATTR_ID_test_v                                27
#define ATTR_ID_test_w                                28
#define ATTR_ID_test_x                                29
#define ATTR_ID_load_path                             50
#define ATTR_ID_dump_path                             51
/* pyend */

/******************************************************************************/
/* Constants and Enumerations                                                 */
/******************************************************************************/

/* pystart - attribute constants */
#define ATTR_TABLE_SIZE                                   32
#define ATTR_TABLE_MAX_ID                                 51
#define ATTR_TABLE_WRITABLE_COUNT                         28
#define ATTR_MAX_STR_LENGTH                               32
#define ATTR_MAX_STR_SIZE                                 33
#define ATTR_MAX_BIN_SIZE                                 4
#define ATTR_MAX_INT_SIZE                                 4

/* Attribute Max String Lengths */
#define ATTR_SENSOR_NAME_MAX_STR_SIZE                     24
#define ATTR_ATTRIBUTE_VERSION_MAX_STR_SIZE               12
#define ATTR_LOAD_PATH_MAX_STR_SIZE                       33
#define ATTR_DUMP_PATH_MAX_STR_SIZE                       33

/* Attribute Byte Array Lengths */
/* pyend */

/* pystart - enumerations */
enum settings_passcode_status {
	SETTINGS_PASSCODE_STATUS_UNDEFINED = 0,
	SETTINGS_PASSCODE_STATUS_VALID_CODE = 1,
	SETTINGS_PASSCODE_STATUS_INVALID_CODE = 2,
};

enum lock_status {
	LOCK_STATUS_NOT_SETUP = 0,
	LOCK_STATUS_SETUP_ENGAGED = 1,
	LOCK_STATUS_SETUP_DISENGAGED = 2,
};

enum attr_dump {
	ATTR_DUMP_RW = 0,
	ATTR_DUMP_W = 1,
	ATTR_DUMP_RO = 2,
};

/* pyend */

/* pystart - enum size check */
BUILD_ASSERT(sizeof(enum settings_passcode_status) == ATTR_SIZE_U8);
BUILD_ASSERT(sizeof(enum lock_status) == ATTR_SIZE_U8);
/* pyend */

/******************************************************************************/
/* Global Function Prototypes                                                 */
/******************************************************************************/
/* The weak implementations should be overridden in application. */
/* pystart - prepare for read */
/* pyend */

/* pystart - get string */
const char *const attr_get_string_settings_passcode_status(int value);
const char *const attr_get_string_lock_status(int value);
/* pyend */

#ifdef __cplusplus
}
#endif

#endif /* __ATTRIBUTE_TABLE_H__ */
