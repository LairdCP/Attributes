/**
 * @file attr_table.h
 *
 * @brief This is generated by attribute_generator.py
 *
 * Copyright (c) 2022 Laird Connectivity
 *
 * SPDX-License-Identifier: Apache-2.0
 */
#ifndef __ATTRIBUTE_TABLE_H__
#define __ATTRIBUTE_TABLE_H__

/******************************************************************************/
/* Includes                                                                   */
/******************************************************************************/
#include <zephyr.h>
#include <zephyr/types.h>
#include <stddef.h>

#include "attr_defs.h"

#ifdef __cplusplus
extern "C" {
#endif

/******************************************************************************/
/* Indices                                                                    */
/******************************************************************************/

/* pystart - attribute indices */
#define ATTR_INDEX_lock                               5
#define ATTR_INDEX_load_path                          48
/* pyend */

/* pystart - attribute ids */
#define ATTR_ID_sensor_name                           0
#define ATTR_ID_location                              1
#define ATTR_ID_advertising_interval                  2
#define ATTR_ID_advertising_duration                  3
#define ATTR_ID_passkey                               4
#define ATTR_ID_lock                                  5
#define ATTR_ID_power_sense_interval                  6
#define ATTR_ID_temperature_sense_interval            7
#define ATTR_ID_firmware_version                      11
#define ATTR_ID_reset_reason                          12
#define ATTR_ID_bluetooth_address                     13
#define ATTR_ID_reset_count                           14
#define ATTR_ID_up_time                               16
#define ATTR_ID_active_mode                           57
#define ATTR_ID_advertising_phy                       58
#define ATTR_ID_tx_power                              59
#define ATTR_ID_network_id                            60
#define ATTR_ID_config_version                        61
#define ATTR_ID_config_type                           62
#define ATTR_ID_hardware_minor_version                63
#define ATTR_ID_temperature_result_1                  70
#define ATTR_ID_power_voltage_mv                      75
#define ATTR_ID_flags                                 89
#define ATTR_ID_magnet_state                          90
#define ATTR_ID_param_path                            91
#define ATTR_ID_battery_age                           92
#define ATTR_ID_attribute_version                     93
#define ATTR_ID_qrtc                                  94
#define ATTR_ID_qrtc_last_set                         95
#define ATTR_ID_settings_passcode                     100
#define ATTR_ID_data_logging_enable                   113
#define ATTR_ID_factory_reset_enable                  114
#define ATTR_ID_log_file_status                       115
#define ATTR_ID_mag_switch_simulated                  162
#define ATTR_ID_mag_switch_simulated_value            163
#define ATTR_ID_boot_phy                              166
#define ATTR_ID_mobile_app_disconnect                 167
#define ATTR_ID_attr_save_error_code                  168
#define ATTR_ID_block_downgrades                      171
#define ATTR_ID_security_level                        173
#define ATTR_ID_build_id                              143
#define ATTR_ID_app_type                              144
#define ATTR_ID_mount                                 145
#define ATTR_ID_motion_odr                            168
#define ATTR_ID_motion_thresh                         169
#define ATTR_ID_motion_scale                          170
#define ATTR_ID_motion_duration                       171
#define ATTR_ID_motion_alarm                          172
#define ATTR_ID_load_path                             208
#define ATTR_ID_dump_path                             209
#define ATTR_ID_floaty                                211
#define ATTR_ID_settings_passcode_status              265
#define ATTR_ID_lock_status                           266
/* pyend */

/******************************************************************************/
/* Constants and Enumerations                                                 */
/******************************************************************************/

/* pystart - attribute constants */
#define ATTR_TABLE_SIZE                                     53
#define ATTR_TABLE_MAX_ID                                   266
#define ATTR_TABLE_WRITABLE_COUNT                           26
#define ATTR_MAX_STR_LENGTH                                 64
#define ATTR_MAX_STR_SIZE                                   65
#define ATTR_MAX_BIN_SIZE                                   8
#define ATTR_MAX_INT_SIZE                                   8

/* Attribute Max String Lengths */
#define ATTR_SENSOR_NAME_MAX_STR_SIZE                       24
#define ATTR_LOCATION_MAX_STR_SIZE                          33
#define ATTR_FIRMWARE_VERSION_MAX_STR_SIZE                  12
#define ATTR_RESET_REASON_MAX_STR_SIZE                      13
#define ATTR_BLUETOOTH_ADDRESS_MAX_STR_SIZE                 13
#define ATTR_PARAM_PATH_MAX_STR_SIZE                        9
#define ATTR_ATTRIBUTE_VERSION_MAX_STR_SIZE                 12
#define ATTR_BUILD_ID_MAX_STR_SIZE                          65
#define ATTR_APP_TYPE_MAX_STR_SIZE                          33
#define ATTR_MOUNT_MAX_STR_SIZE                             33
#define ATTR_LOAD_PATH_MAX_STR_SIZE                         33
#define ATTR_DUMP_PATH_MAX_STR_SIZE                         33

/* Attribute Byte Array Lengths */
/* pyend */

/* pystart - enumerations */
enum advertising_phy {
	ADVERTISING_PHY_CODED = 0,
	ADVERTISING_PHY_1M = 1,
};

enum config_type {
	CONFIG_TYPE_NOT_CONFIGURED = 0,
	CONFIG_TYPE_ANALOG = 1,
	CONFIG_TYPE_DIGITAL = 2,
	CONFIG_TYPE_TEMPERATURE = 3,
	CONFIG_TYPE_CURRENT = 4,
	CONFIG_TYPE_ULTRASONIC_PRESSURE = 5,
	CONFIG_TYPE_SPI_OR_I2C = 6,
};

enum magnet_state {
	MAGNET_STATE_FAR_DOOR_OPEN = true,
	MAGNET_STATE_NEAR_DOOR_CLOSED = false,
};

enum log_file_status {
	LOG_FILE_STATUS_WAITING_FOR_PREPARE_COMMAND = 0,
	LOG_FILE_STATUS_PREPARING = 1,
	LOG_FILE_STATUS_READY = 2,
	LOG_FILE_STATUS_FAILED = 3,
};

enum boot_phy {
	BOOT_PHY_DEFAULT = 0,
	BOOT_PHY_CODED = 1,
	BOOT_PHY_1M = 2,
};

enum settings_passcode_status {
	SETTINGS_PASSCODE_STATUS_UNDEFINED = 0,
	SETTINGS_PASSCODE_STATUS_VALID_CODE = 1,
	SETTINGS_PASSCODE_STATUS_INVALID_CODE = 2,
};

enum lock_status {
	LOCK_STATUS_NOT_SETUP = 0,
	LOCK_STATUS_SETUP_ENGAGED = 1,
	LOCK_STATUS_SETUP_DISENGAGED = 2,
};

enum attr_dump {
	ATTR_DUMP_RW = 0,
	ATTR_DUMP_W = 1,
	ATTR_DUMP_RO = 2,
};

/* pyend */

/* pystart - enum size check */
BUILD_ASSERT(sizeof(enum advertising_phy) == ATTR_SIZE_BOOL);
BUILD_ASSERT(sizeof(enum config_type) == ATTR_SIZE_U8);
BUILD_ASSERT(sizeof(enum magnet_state) == ATTR_SIZE_BOOL);
BUILD_ASSERT(sizeof(enum log_file_status) == ATTR_SIZE_U8);
BUILD_ASSERT(sizeof(enum boot_phy) == ATTR_SIZE_U8);
BUILD_ASSERT(sizeof(enum settings_passcode_status) == ATTR_SIZE_U8);
BUILD_ASSERT(sizeof(enum lock_status) == ATTR_SIZE_U8);
/* pyend */

/* Sensor configuration */
#define ANALOG_INPUTS_MAX_PRESSURE_SENSORS 2
#define ANALOG_INPUTS_MAX_PRESSURE_SENSORS_WITH_ULTRASONIC 1
#define ANALOG_INPUTS_MAX_ULTRASONIC 1
#define ANALOG_INPUT_NUMBER_OF_CHANNELS 4

/******************************************************************************/
/* Global Function Prototypes                                                 */
/******************************************************************************/
/* The weak implementations should be overridden in application. */
/* pystart - prepare for read */
int attr_prepare_up_time(void);
int attr_prepare_temperature_result_1(void);
int attr_prepare_power_voltage_mv(void);
int attr_prepare_qrtc(void);
int attr_prepare_qrtc_last_set(void);
int attr_prepare_log_file_status(void);
int attr_prepare_security_level(void);
/* pyend */

/* pystart - get string */
const char *const attr_get_string_advertising_phy(int value);
const char *const attr_get_string_config_type(int value);
const char *const attr_get_string_magnet_state(int value);
const char *const attr_get_string_log_file_status(int value);
const char *const attr_get_string_boot_phy(int value);
const char *const attr_get_string_settings_passcode_status(int value);
const char *const attr_get_string_lock_status(int value);
/* pyend */

#ifdef __cplusplus
}
#endif

#endif /* __ATTRIBUTE_TABLE_H__ */
